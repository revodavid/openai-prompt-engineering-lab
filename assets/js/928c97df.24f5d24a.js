"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[648],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=l(n),d=o,g=m["".concat(s,".").concat(d)]||m[d]||c[d]||a;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[m]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9174:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var r=n(7462),o=(n(7294),n(4137));const a={},i="Prompt Engineering",p={unversionedId:"Prompt-Engineering",id:"Prompt-Engineering",title:"Prompt Engineering",description:"As we've seen, natural language Generative AI models can produce unexpected or unwanted responses to prompts. This can be caused by any number of factors, including:",source:"@site/docs/60-Prompt-Engineering.md",sourceDirName:".",slug:"/Prompt-Engineering",permalink:"/openai-prompt-engineering-lab/Prompt-Engineering",draft:!1,editUrl:"https://github.com/revodavid/openai-prompt-engineering-lab/tree/main/docs/60-Prompt-Engineering.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Conversations",permalink:"/openai-prompt-engineering-lab/Conversations"},next:{title:"Using the API",permalink:"/openai-prompt-engineering-lab/Using-the-API"}},s={},l=[{value:"Fine Tuning",id:"fine-tuning",level:2},{value:"Prompt Engineering Techniques",id:"prompt-engineering-techniques",level:2}],u={toc:l},m="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"prompt-engineering"},"Prompt Engineering"),(0,o.kt)("p",null,"As we've seen, natural language Generative AI models can produce unexpected or unwanted responses to prompts. This can be caused by any number of factors, including:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Insufficient information in the training data"),(0,o.kt)("li",{parentName:"ul"},"Insufficient context in the prompt"),(0,o.kt)("li",{parentName:"ul"},"Lack of capability of the model itself"),(0,o.kt)("li",{parentName:"ul"},'Hostile intent by the user providing the prompt ("jailbreaking")')),(0,o.kt)("p",null,'Prompt Engineering is the process of adding additional context to the prompt to provide "grounding" to the AI model and make it more likely to produce the desired response and less likely to produce undesirable outputs. For example, in a chatbot application, the system would inject additional instructions and data into the prompt before the user\'s actual input, to provide context to the model. '),(0,o.kt)("p",null,"In the prior Conversations section, the System message, the one-shot examples, and the conversation history all provide grounding to the model via the prompt. If you're building an application that is based on a natural language generative AI model, your application will need to construct the prompt itself."),(0,o.kt)("p",null,"For more background, read ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/cognitive-services/openai/concepts/prompt-engineering"},"Introduction to prompt engineering on Microsoft Learn"),". "),(0,o.kt)("h2",{id:"fine-tuning"},"Fine Tuning"),(0,o.kt)("p",null,'Another technique you can use to improve the quality of responses is a process called "',(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/cognitive-services/openai/how-to/fine-tuning"},"fine-tuning"),"\", which retrains the underlying model with example prompts and responses that you provide. We don't cover fine-tuning in this workshop, primarily because prompt engineering generally produces better results, faster and more easily."),(0,o.kt)("h2",{id:"prompt-engineering-techniques"},"Prompt Engineering Techniques"),(0,o.kt)("p",null,"Prompt Engineering is a complex and rapidly-evolving practice. The article ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/cognitive-services/openai/concepts/advanced-prompt-engineering"},"Prompt engineering techniques")," on Microsoft Learn provides the latest guidance. "),(0,o.kt)("p",null,"Choose one of the topics summarized below, and try out the examples provided in the page linked above. You can use either the Completions Playground or the Chat Playground for your tests. The Completions Playground is easiest to work with, but you will need to prepend the system message to the provided prompt in the User column. "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"System message"),": use the system message to prime the model with context, instructions, or other information relevant to the use case.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Few-shot learning"),": adapt language models to new tasks by providing a set of training examples as part of the prompt.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Non chat scenarios"),": use the Chat Completion API for non chat scenarios, such as sentiment analysis or entity extraction. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Start with clear instructions"),": telling the model the task you want it to do at the beginning of the prompt, before sharing additional contextual information or examples, can help produce higher-quality outputs. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Repeat instructions at the end"),": models can be susceptible to recency bias, which means that information at the end of the prompt might have more significant influence over the output than information at the beginning of the prompt. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Prime the output"),": use a few words or phrases at the end of the prompt to obtain a model response that follows the desired form.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Add clear syntax"),": use clear syntax for your prompt, such as punctuation, headings, and section markers, to communicate intent and make outputs easier to parse.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Break the task down"),": large language models often perform better if the task is broken down into smaller steps. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Use of affordances"),": you can use affordances external to the model, such as search, instead of relying on the model\u2019s own parameters for information and answers. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Chain of thought prompting"),": a variation on breaking down the task technique, where instead of splitting a task into smaller steps, you instruct the model response to proceed step-by-step and present all steps involved. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Specifying the output structure"),": providing a model for the output structure can have significant impact on nature and quality of results. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Temperature and Top_p parameters"),": changing the temperature or Top_probabilty parameters make the output more focused or more random. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Provide grounding context"),": use an ancillary process to provide reliable data in the prompt for the model to draw responses from."))),(0,o.kt)("p",null,"Fun fact! The summarizations above were generated by Bing Chat (Creative Mode) from the contents of ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/cognitive-services/openai/concepts/advanced-prompt-engineering"},"this page"),' using the prompt: "summarize this page section by section with a 1 sentence summary of each section", along with some light editing.'))}c.isMDXComponent=!0}}]);